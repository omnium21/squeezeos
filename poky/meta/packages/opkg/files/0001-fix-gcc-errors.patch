From 68735e96931324a9a9ad3e368cb8f700dc65c6e7 Mon Sep 17 00:00:00 2001
From: Nicolas Aguirre <aguirre.nicolas@gmail.com>
Date: Wed, 15 Apr 2020 18:49:36 +0200
Subject: [PATCH] opkg fix gcc warnings

---
 libopkg/opkg.c        |  4 ++--
 libopkg/opkg_utils.c  |  4 ++--
 libopkg/pkg_depends.c | 14 ++------------
 libopkg/pkg_hash.c    |  3 ---
 4 files changed, 6 insertions(+), 19 deletions(-)

diff --git a/libopkg/opkg.c b/libopkg/opkg.c
index bb0470d..0f249a4 100644
--- a/libopkg/opkg.c
+++ b/libopkg/opkg.c
@@ -383,7 +383,7 @@ opkg_install_package (opkg_t *opkg, const char *package_name, opkg_progress_call
   opkg_progress_data_t pdata;
   pkg_t *old, *new;
   pkg_vec_t *deps, *all;
-  int i, ndepends;
+  int i;
   char **unresolved = NULL;
 
   opkg_assert (opkg != NULL);
@@ -418,7 +418,7 @@ opkg_install_package (opkg_t *opkg, const char *package_name, opkg_progress_call
   /* find dependancies and download them */
   deps = pkg_vec_alloc ();
   /* this function does not return the original package, so we insert it later */
-  ndepends = pkg_hash_fetch_unsatisfied_dependencies (opkg->conf, new, deps, &unresolved);
+  pkg_hash_fetch_unsatisfied_dependencies (opkg->conf, new, deps, &unresolved);
   if (unresolved)
   {
     /* XXX: Error: Could not satisfy dependencies */
diff --git a/libopkg/opkg_utils.c b/libopkg/opkg_utils.c
index c88f0e5..f9d28ca 100644
--- a/libopkg/opkg_utils.c
+++ b/libopkg/opkg_utils.c
@@ -94,14 +94,14 @@ char **read_raw_pkgs_from_stream(FILE *fp)
 char *trim_alloc(char *line)
 {
      char *new; 
-     char *dest, *src, *end;
+     char *src, *end;
     
      new = malloc(strlen(line) + 1);
      if ( new == NULL ){
         fprintf(stderr,"%s: Unable to allocate memory\n",__FUNCTION__);
         return NULL;
      }
-     dest = new, src = line, end = line + (strlen(line) - 1);
+     src = line, end = line + (strlen(line) - 1);
 
      /* remove it from the front */    
      while(src && 
diff --git a/libopkg/pkg_depends.c b/libopkg/pkg_depends.c
index b0aacb3..1419194 100644
--- a/libopkg/pkg_depends.c
+++ b/libopkg/pkg_depends.c
@@ -267,13 +267,10 @@ int is_pkg_a_replaces(pkg_t *pkg_scout,pkg_t *pkg)
 {
     int i ;
     int replaces_count = pkg->replaces_count;
-    abstract_pkg_t **replaces;
 
     if (pkg->replaces_count==0)    // No replaces, it's surely a conflict
         return 0;
 
-    replaces = pkg->replaces;
-
     for (i = 0; i < replaces_count; i++) {
         if (strcmp(pkg_scout->name,pkg->replaces[i]->name)==0) {      // Found
             opkg_message(NULL, OPKG_DEBUG2, "Seems I've found a replace %s %s \n",pkg_scout->name,pkg->replaces[i]->name);
@@ -293,7 +290,6 @@ pkg_vec_t * pkg_hash_fetch_conflicts(hash_table_t * hash, pkg_t * pkg)
     depend_t ** possible_satisfiers;
     depend_t * possible_satisfier;
     register int i, j, k;
-    int count;
     abstract_pkg_t * ab_pkg;
     pkg_t **pkg_scouts; 
     pkg_t *pkg_scout; 
@@ -313,10 +309,6 @@ pkg_vec_t * pkg_hash_fetch_conflicts(hash_table_t * hash, pkg_t * pkg)
     }
     installed_conflicts = pkg_vec_alloc();
 
-    count = pkg->conflicts_count;
-
-
-
     /* foreach conflict */
     for(i = 0; i < pkg->conflicts_count; i++){
 
@@ -655,7 +647,7 @@ void printDepends(pkg_t * pkg)
 
 int buildProvides(hash_table_t * hash, abstract_pkg_t * ab_pkg, pkg_t * pkg)
 {
-    register int i, j;
+    register int i;
 
     /* every pkg provides itself */
     abstract_pkg_vec_insert(ab_pkg->provided_by, ab_pkg);
@@ -680,7 +672,6 @@ int buildProvides(hash_table_t * hash, abstract_pkg_t * ab_pkg, pkg_t * pkg)
 
 	pkg->provides[i+1] = provided_abpkg;
 
-	j = 0;
 	abstract_pkg_vec_insert(provided_abpkg->provided_by, ab_pkg);
     }
     return 0;
@@ -719,7 +710,7 @@ int buildConflicts(hash_table_t * hash, abstract_pkg_t * ab_pkg, pkg_t * pkg)
 
 int buildReplaces(hash_table_t * hash, abstract_pkg_t * ab_pkg, pkg_t * pkg)
 {
-     register int i, j;
+     register int i;
 
      if (!pkg->replaces_count)
 	  return 0;
@@ -738,7 +729,6 @@ int buildReplaces(hash_table_t * hash, abstract_pkg_t * ab_pkg, pkg_t * pkg)
 
 	  pkg->replaces[i] = old_abpkg;
 
-	  j = 0;
 	  if (!old_abpkg->replaced_by)
 	       old_abpkg->replaced_by = abstract_pkg_vec_alloc();
                if ( old_abpkg->replaced_by == NULL ){
diff --git a/libopkg/pkg_hash.c b/libopkg/pkg_hash.c
index 97613e5..69ef624 100644
--- a/libopkg/pkg_hash.c
+++ b/libopkg/pkg_hash.c
@@ -558,13 +558,10 @@ abstract_pkg_t * ensure_abstract_pkg_by_name(hash_table_t * hash, const char * p
 pkg_t *hash_insert_pkg(hash_table_t *hash, pkg_t *pkg, int set_status,opkg_conf_t *conf)
 {
      abstract_pkg_t * ab_pkg;
-     int arch_priority;
 
      if(!pkg)
 	  return pkg;
 
-     arch_priority = pkg->arch_priority;
-
      if (buildDepends(hash, pkg)<0){
         fprintf(stderr, "%s : This should never happen. Report this Bug in bugzilla please \n ",__FUNCTION__);
         return NULL;
-- 
2.20.1

